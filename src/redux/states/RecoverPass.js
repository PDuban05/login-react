// Importing necessary libraries
import { createSlice } from "@reduxjs/toolkit"; // Importing createSlice to create the Redux slice
import axios from "axios"; // Importing axios for making HTTP requests

// Initial state of the email slice
const initialState = {
  loading: false, // Indicates if a request is currently loading
  error: null, // Holds error messages related to email actions
  success: false, // Indicates success of sending the verification email
  codeVerificationSuccess: false, // Indicates success of code verification
  codeVerificationError: null, // Holds error messages related to code verification
  userInfo: null, // Stores user information after successful verification
  passwordChangeSuccess: false, // Indicates success of password change
  passwordChangeError: null, // Holds error messages related to password change
};

// Creating the email slice to manage email actions and state
const emailSlice = createSlice({
  name: "passrecover", // Name of the slice
  initialState, // Setting the initial state
  reducers: {
    // Actions for sending verification email
    sendVerificationEmailStart(state) {
      state.loading = true; // Set loading to true when the email sending process starts
      state.error = null; // Reset error state
      state.success = false; // Reset success state
    },
    sendVerificationEmailSuccess(state) {
      state.loading = false; // Set loading to false upon success
      state.success = true; // Mark the email as sent successfully
    },
    sendVerificationEmailFailure(state, action) {
      state.loading = false; // Set loading to false upon failure
      state.error = action.payload; // Store error message
      state.success = false; // Mark the email sending as failed
    },
    // Actions for verifying the code
    verifyCodeStart(state) {
      state.loading = true; // Set loading to true during code verification
      state.codeVerificationError = null; // Reset code verification error
      state.codeVerificationSuccess = false; // Reset code verification success
    },
    verifyCodeSuccess(state, action) {
      state.loading = false; // Set loading to false upon successful verification
      state.codeVerificationSuccess = true; // Mark verification as successful
      state.userInfo = action.payload; // Store user information in state
    },
    verifyCodeFailure(state, action) {
      state.loading = false; // Set loading to false upon failure
      state.codeVerificationError = action.payload; // Store error message
      state.codeVerificationSuccess = false; // Mark verification as failed
      state.userInfo = null; // Clear user information on failure
    },
    // Actions for changing password
    changePasswordStart(state) {
      state.loading = true; // Set loading to true when password change starts
      state.passwordChangeError = null; // Reset password change error
      state.passwordChangeSuccess = false; // Reset password change success
    },
    changePasswordSuccess(state) {
      state.loading = false; // Set loading to false upon success
      state.passwordChangeSuccess = true; // Mark password change as successful
    },
    changePasswordFailure(state, action) {
      state.loading = false; // Set loading to false upon failure
      state.passwordChangeError = action.payload; // Store error message
      state.passwordChangeSuccess = false; // Mark password change as failed
    },
    // Reset all states to the initial values
    resetAllStates(state) {
      Object.assign(state, initialState); // Resetting all states to initial
    },
  },
});

// Exporting the actions generated by createSlice for use in components
export const {
  sendVerificationEmailStart,
  sendVerificationEmailSuccess,
  sendVerificationEmailFailure,
  verifyCodeStart,
  verifyCodeSuccess,
  verifyCodeFailure,
  changePasswordStart,
  changePasswordSuccess,
  changePasswordFailure,
  resetAllStates,
} = emailSlice.actions;

// Exporting the reducer to be used in the Redux store
export default emailSlice.reducer;

// Function to send a verification email
export const sendVerificationEmail = (email) => async (dispatch) => {
  dispatch(sendVerificationEmailStart()); // Dispatch action to indicate email sending has started

  try {
    // Sending a POST request to the server to send the verification code
    const response = await axios.post(
      "http://localhost:3001/send-verification-code",
      email // Email is sent in the request body
    );
    // Check if the response indicates success
    if (response.data.success) {
      dispatch(sendVerificationEmailSuccess()); // Dispatch success action
    } else {
      dispatch(sendVerificationEmailFailure(response.data.message)); // Dispatch failure action with error message
    }
  } catch (error) {
    // Catching any errors during the request
    dispatch(sendVerificationEmailFailure(error.message)); // Dispatch failure action with error message
    return error; // Return error for further handling if necessary
  }
};

// Function to verify the provided code and store user information
export const verifyCode = (code) => async (dispatch) => {
  dispatch(verifyCodeStart()); // Dispatch action to indicate code verification has started
  try {
    // Sending a POST request to verify the provided code
    const response = await axios.post(
      "http://localhost:3001/verify-code",
      { code } // Code is sent in the request body
    );

    // Check if the response indicates success
    if (response.data.success) {
      dispatch(verifyCodeSuccess(response.data.user)); // Dispatch success action with user data
    } else {
      dispatch(verifyCodeFailure(response.data.message)); // Dispatch failure action with error message
    }

    return response; // Return the response for further handling if necessary
  } catch (error) {
    // Catching any errors during the request
    dispatch(verifyCodeFailure(error.message)); // Dispatch failure action with error message
    return error; // Return error for further handling if necessary
  }
};

// Function to change the password of the user
export const changePassword = (newPassword) => async (dispatch, getState) => {
  dispatch(changePasswordStart()); // Dispatch action to indicate password change has started

  const { user_id } = getState().passrecover.userInfo; // Get user ID from state

  console.log(user_id, newPassword); // Log user ID and new password for debugging
  try {
    // Sending a POST request to change the user's password
    const response = await axios.post(
      "http://localhost:3001/change-password",
      {
        userId: user_id, // Sending user ID in the request body
        newPassword: newPassword, // Sending the new password
      }
    );
    console.log(response); // Log the response from the server for debugging
    // Check if the response indicates success
    if (response.data.success) {
      dispatch(changePasswordSuccess()); // Dispatch success action
    } else {
      dispatch(changePasswordFailure(response.data.message)); // Dispatch failure action with error message
    }
  } catch (error) {
    // Catching any errors during the request
    dispatch(changePasswordFailure(error.message)); // Dispatch failure action with error message
    return error; // Return error for further handling if necessary
  }
};
